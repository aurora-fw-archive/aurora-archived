// ┌─┐┬ ┬┬─┐┌─┐┬─┐┌─┐  ┌─┐┬─┐┌─┐┌┬┐┌─┐┬ ┬┌─┐┬─┐┬┌─ | Powerful, Scalable and Cross Platform Framework
// ├─┤│ │├┬┘│ │├┬┘├─┤  ├┤ ├┬┘├─┤│││├┤ ││││ │├┬┘├┴┐ | @author Luís Ferreira
// ┴ ┴└─┘┴└─└─┘┴└─┴ ┴  └  ┴└─┴ ┴┴ ┴└─┘└┴┘└─┘┴└─┴ ┴ | @license GNU Public License v3
//  Copyright (c) 2016 - Luís Ferreira. All right reserved
//  More information in: https://github.com/ljmf00/ (Github Page)

#ifndef INCLUDE_H_AURORA_CRYPTO_AES
#define INCLUDE_H_AURORA_CRYPTO_AES

#include <Aurora/Core/Aurora.h>

namespace Aurora
{
	class AES
	{

		static int _nr, _nk;

		/* in - it is the array that holds the CipherText to be decrypted.
		* out - it is the array that holds the output of the for decryption.
		* state - the array that holds the intermediate results during decryption.
		*/
		static unsigned char _i[16], _o[16], _s[4][4];

		// The array that stores the round keys.
		static unsigned char _rk[240];
		// The Key input to the AES Program
		static unsigned char _k[32];

		const int _getSBV(const int);
		// Inverted _getSBV
		const int _getISBV(const int);

		/* 
		* The round constant word array, Rcon[i], contains the values given by 
		* x to th e power (i-1) being powers of x (x is denoted as {02}) in the field GF(2^8)
		* Note that i starts at 1, not 0).
		*/
		const int _rc[255] = 
		{
			0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 
			0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 
			0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 
			0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 
			0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 
			0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 
			0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 
			0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 
			0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 
			0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 
			0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 
			0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 
			0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 
			0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 
			0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 
			0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb  
		};

		// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states. 
		void _ke();
		/* This function adds the round key to state.
		* The round key is added to the state by an XOR function.
		*/
		void AddRoundKey(int round);
		/* The SubBytes Function Substitutes the values in the
		* state matrix with values in an S-box.
		*/
		void _sb();
		// Inverted _sb
		void _isb();

		/* The ShiftRows() function shifts the rows in the state to the left.
		* Each row is shifted with different offset.
		* Offset = Row number. So the first row is not shifted.
		*/
		void _sr();
		// Inverted method of _sr
		void _isr();

		// MixColumns function mixes the columns of the state matrix
		void _mc();
		// Inverted method of _mc
		void _imc();

		// Cipher is the main function that encrypts the input text
		void _c();
		// Inverted Cipher
		void _ic();
	public:
		// AES encrypt function
		static unsigned char* encrypt(const unsigned char, const int, unsigned char);
		// AES decrypt functionx
		static unsigned char* decrypt(const unsigned char, const int, unsigned char);
	};
}


#endif // INCLUDE_H_AURORA_CRYPTO_AES