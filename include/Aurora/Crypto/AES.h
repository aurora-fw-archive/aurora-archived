// ┌─┐┬ ┬┬─┐┌─┐┬─┐┌─┐  ┌─┐┬─┐┌─┐┌┬┐┌─┐┬ ┬┌─┐┬─┐┬┌─ | Powerful, Scalable and Cross Platform Framework
// ├─┤│ │├┬┘│ │├┬┘├─┤  ├┤ ├┬┘├─┤│││├┤ ││││ │├┬┘├┴┐ | @author Luís Ferreira
// ┴ ┴└─┘┴└─└─┘┴└─┴ ┴  └  ┴└─┴ ┴┴ ┴└─┘└┴┘└─┘┴└─┴ ┴ | @license GNU Public License v3
//  Copyright (c) 2016 - Luís Ferreira. All right reserved
//  More information in: https://github.com/ljmf00/ (Github Page)

#ifndef INCLUDE_H_AURORA_CRYPTO_AES
#define INCLUDE_H_AURORA_CRYPTO_AES

#include <Aurora/Core/Aurora.h>

namespace Aurora
{
    class AES
    {
    public:
        static unsigned char* encrypt(unsigned char key[32], int keysize, unsigned char plaintext[16]);
	    static unsigned char* decrypt(unsigned char key[32], int keysize, unsigned char ciphertext[16]);

    private:
        int Nr, Nk;

        /* in - it is the array that holds the CipherText to be decrypted.
        * out - it is the array that holds the output of the for decryption.
        * state - the array that holds the intermediate results during decryption.
        */
	    unsigned char in[16], out[16], state[4][4];

	    // The array that stores the round keys.
	    unsigned char RoundKey[240];
	    // The Key input to the AES Program
	    unsigned char Key[32];
	    int getSBoxValue(int num);
        /* 
        * The round constant word array, Rcon[i], contains the values given by 
        * x to th e power (i-1) being powers of x (x is denoted as {02}) in the field GF(2^8)
        * Note that i starts at 1, not 0).
        */
	    int Rcon[255] = 
        {
		    0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 
            0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 
            0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 
            0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 
            0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 
            0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 
            0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 
            0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 
            0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 
            0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 
            0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 
            0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 
            0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 
            0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 
            0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 
            0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb  
        };

	    int getSBoxInvert(int num);
        // This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states. 
        void KeyExpansion();
        /* This function adds the round key to state.
        * The round key is added to the state by an XOR function.
        */
        void AddRoundKey(int round);
        /* The SubBytes Function Substitutes the values in the
        * state matrix with values in an S-box.
        */
        void SubBytes();
        /* The ShiftRows() function shifts the rows in the state to the left.
        * Each row is shifted with different offset.
        * Offset = Row number. So the first row is not shifted.
        */
        void ShiftRows();
        // MixColumns function mixes the columns of the state matrix
        void MixColumns();
        // Cipher is the main function that encrypts the PlainText.
        void Cipher();
        /* The SubBytes Function Substitutes the values in the
        * state matrix with values in an S-box.
        */
        void InvSubBytes();
        /* The ShiftRows() function shifts the rows in the state to the left.
        * Each row is shifted with different offset.
        * Offset = Row number. So the first row is not shifted.
        */
        void InvShiftRows();
        void InvMixColumns();
        void InvCipher();
    };
}


#endif // INCLUDE_H_AURORA_CRYPTO_AES